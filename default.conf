lua_shared_dict ipv6_cache 10m;

init_by_lua_block {
    ngx.log(ngx.NOTICE, "Loading Lua modules...")
    local http = require "resty.http"
    local cjson = require "cjson"
    ngx.log(ngx.NOTICE, "Modules loaded successfully")
}

server {
    listen 80 default_server;
    server_name ~^(?<miniapp_uuid>[^.]+)\.app\.chromaforgeai\.com$;

    # Debug logging
    error_log /var/log/nginx/error.log debug;

    location /health {
        return 200 'healthy\n';
    }

    location / {
        rewrite_by_lua_block {
            ngx.log(ngx.NOTICE, "Processing request for host: ", ngx.var.host)
            local miniapp_uuid = ngx.var.miniapp_uuid
            ngx.log(ngx.NOTICE, "MiniApp UUID: ", miniapp_uuid)

            local http = require "resty.http"
            local cjson = require "cjson"
            local httpc = http.new()

            local api_url = "https://squ6lqtrx0.execute-api.us-east-1.amazonaws.com/lookup/" .. miniapp_uuid
            ngx.log(ngx.NOTICE, "Calling API: ", api_url)

            local res, err = httpc:request_uri(api_url, {
                method = "GET",
                headers = {
                    ["User-Agent"] = "NGINX/OpenResty"
                }
            })

            if not res then
                ngx.log(ngx.ERR, "API request failed: ", err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                return
            end

            ngx.log(ngx.NOTICE, "API response: ", res.body)
            local data = cjson.decode(res.body)

            if not data.ipv6_address then
                ngx.log(ngx.ERR, "No IPv6 address in response")
                ngx.exit(ngx.HTTP_NOT_FOUND)
                return
            end

            -- Store in nginx variable for proxy_pass
            ngx.var.target_ipv6 = data.ipv6_address
            ngx.log(ngx.NOTICE, "Target IPv6: ", data.ipv6_address)
        }

        set $target_ipv6 '';
        proxy_pass http://[$target_ipv6]:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}