# default.conf
lua_shared_dict ipv6_cache 10m;

init_by_lua_block {
    local http = require "resty.http"
    local cjson = require "cjson"
}

server {
    listen 80;
    server_name ~^(?<miniapp_uuid>[^.]+)\.app\.chromaforgeai\.com$;

    # Health check for AWS
    location /health {
        access_log off;
        return 200 'healthy\n';
    }

    location / {
        access_by_lua_block {
            local http = require "resty.http"
            local cjson = require "cjson"
            
            -- Get miniapp_uuid from domain
            local miniapp_uuid = ngx.var.miniapp_uuid
            
            -- Check cache first
            local ipv6_cache = ngx.shared.ipv6_cache
            local ipv6 = ipv6_cache:get(miniapp_uuid)
            
            if not ipv6 then
                -- Make API request to get IPv6
                local httpc = http.new()
                local res, err = httpc:request_uri(
                    "https://squ6lqtrx0.execute-api.us-east-1.amazonaws.com/lookup/" .. miniapp_uuid,
                    { method = "GET" }
                )
                
                if not res then
                    ngx.log(ngx.ERR, "Failed to request IPv6: ", err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    return
                end
                
                local data = cjson.decode(res.body)
                if not data.ipv6_address then
                    ngx.log(ngx.ERR, "No IPv6 found for: ", miniapp_uuid)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                    return
                end
                
                ipv6 = data.ipv6_address
                -- Cache for 60 seconds
                ipv6_cache:set(miniapp_uuid, ipv6, 60)
            end
            
            -- Set for use in proxy_pass
            ngx.var.target_ipv6 = ipv6
        }
        
        proxy_pass http://[$target_ipv6]:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}