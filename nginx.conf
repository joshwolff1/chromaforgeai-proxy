worker_processes auto;
error_log /var/log/nginx/error.log debug;
pid /run/nginx.pid;

env SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt;

events {
   worker_connections 1024;
}

http {
   # Add resolver for DNS lookups
   resolver 8.8.8.8 8.8.4.4 valid=300s;
   resolver_timeout 5s;

   include /usr/local/openresty/nginx/conf/mime.types;
   default_type application/octet-stream;

   lua_package_path '/usr/local/openresty/lualib/?.lua;;';
   lua_shared_dict ipv6_cache 10m;

   # SSL verification settings for Lua
   lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
   lua_ssl_verify_depth 5;

   log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';
   
   access_log /var/log/nginx/access.log main;
   sendfile on;
   keepalive_timeout 65;

   init_by_lua_block {
       ngx.log(ngx.NOTICE, "Loading Lua modules...")
       local http = require "resty.http"
       local cjson = require "cjson"
       ngx.log(ngx.NOTICE, "Modules loaded successfully")
   }

   server {
       listen 80 default_server;
       server_name ~^(?<miniapp_uuid>[^.]+)\.app\.chromaforgeai\.com$;

       error_log /var/log/nginx/error.log debug;

       # Health check endpoint
       location /health {
           return 200 'healthy\n';
       }

       # Debug endpoints
       location /debug/info {
           default_type application/json;
           content_by_lua_block {
               local cjson = require "cjson"
               ngx.say(cjson.encode({
                   host = ngx.var.host,
                   miniapp_uuid = ngx.var.miniapp_uuid,
                   remote_addr = ngx.var.remote_addr,
                   http_user_agent = ngx.var.http_user_agent
               }))
           }
       }

       location /debug/lookup {
           default_type application/json;
           content_by_lua_block {
               local http = require "resty.http"
               local cjson = require "cjson"

               local miniapp_uuid = ngx.req.get_uri_args()["uuid"] or ngx.var.miniapp_uuid
               
               local httpc = http.new()
               
               httpc:set_timeout(10000)
               
               local ok, err = httpc:connect("squ6lqtrx0.execute-api.us-east-1.amazonaws.com", 443)
               if not ok then
                   ngx.status = 500
                   ngx.say(cjson.encode({
                       error = "connect failed: " .. err,
                       miniapp_uuid = miniapp_uuid
                   }))
                   return
               end
               
               local ok, err = httpc:ssl_handshake(nil, "squ6lqtrx0.execute-api.us-east-1.amazonaws.com", true)
               if not ok then
                   ngx.status = 500
                   ngx.say(cjson.encode({
                       error = "ssl handshake failed: " .. err,
                       miniapp_uuid = miniapp_uuid
                   }))
                   return
               end
               
               local res, err = httpc:request({
                   path = "/lookup/" .. miniapp_uuid,
                   headers = {
                       ["Host"] = "squ6lqtrx0.execute-api.us-east-1.amazonaws.com",
                       ["User-Agent"] = "NGINX/OpenResty Debug"
                   }
               })

               if err then
                   ngx.status = 500
                   ngx.say(cjson.encode({
                       error = err,
                       miniapp_uuid = miniapp_uuid
                   }))
                   return
               end

               local body = res:read_body()
               local success, decoded = pcall(cjson.decode, body)
               
               ngx.say(cjson.encode({
                   miniapp_uuid = miniapp_uuid,
                   status = res.status,
                   body = success and decoded or body,
                   ssl = "verified"
               }))
               
               httpc:close()
           }
       }

       # Testing proxy with specific IPv6
       location /debug/proxy {
           default_type application/json;
           content_by_lua_block {
               local cjson = require "cjson"
               local ipv6 = ngx.req.get_uri_args()["ipv6"]
               if not ipv6 then
                   ngx.status = 400
                   ngx.say(cjson.encode({error = "Missing ipv6 parameter"}))
                   return
               end

               local sock = ngx.socket.tcp()
               local ok, err = sock:connect("[" .. ipv6 .. "]", 80)
               
               ngx.say(cjson.encode({
                   ipv6 = ipv6,
                   connection_success = ok ~= nil,
                   error = err
               }))
           }
       }

       location / {
           rewrite_by_lua_block {
               ngx.log(ngx.NOTICE, "Processing request for host: ", ngx.var.host)
               local miniapp_uuid = ngx.var.miniapp_uuid
               ngx.log(ngx.NOTICE, "MiniApp UUID: ", miniapp_uuid)

               local http = require "resty.http"
               local cjson = require "cjson"
               local httpc = http.new()
               
               httpc:set_timeout(10000)
               
               local ok, err = httpc:connect("squ6lqtrx0.execute-api.us-east-1.amazonaws.com", 443)
               if not ok then
                   ngx.log(ngx.ERR, "Connect failed: ", err)
                   ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                   return
               end
               
               local ok, err = httpc:ssl_handshake(nil, "squ6lqtrx0.execute-api.us-east-1.amazonaws.com", true)
               if not ok then
                   ngx.log(ngx.ERR, "SSL handshake failed: ", err)
                   ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                   return
               end
               
               local res, err = httpc:request({
                   path = "/lookup/" .. miniapp_uuid,
                   headers = {
                       ["Host"] = "squ6lqtrx0.execute-api.us-east-1.amazonaws.com",
                       ["User-Agent"] = "NGINX/OpenResty"
                   }
               })

               if err then
                   ngx.log(ngx.ERR, "Request failed: ", err)
                   ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                   return
               end

               local body = res:read_body()
               local success, data = pcall(cjson.decode, body)
               
               if not success then
                   ngx.log(ngx.ERR, "JSON decode failed: ", body)
                   ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                   return
               end

               if not data.ipv6_address then
                   ngx.log(ngx.ERR, "No IPv6 address in response")
                   ngx.exit(ngx.HTTP_NOT_FOUND)
                   return
               end

               ngx.var.target_ipv6 = data.ipv6_address
               ngx.log(ngx.NOTICE, "Target IPv6: ", data.ipv6_address)
               
               httpc:close()
           }

           set $target_ipv6 '';
           proxy_pass http://[$target_ipv6]:80;
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_set_header X-Forwarded-Proto $scheme;
       }
   }
}